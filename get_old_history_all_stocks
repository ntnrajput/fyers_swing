from fyers_apiv3 import fyersModel
from datetime import datetime, timezone, timedelta
import os
import csv
import time
import pandas as pd
import matplotlib.pyplot as plt
from side_functions import get_support_levels
from concurrent.futures import ThreadPoolExecutor, as_completed
from side_functions import get_history


# Configuration
client_id = "VE3CCLJZWA-100" 
access_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsiZDoxIiwiZDoyIiwieDowIiwieDoxIiwieDoyIl0sImF0X2hhc2giOiJnQUFBQUFCb2FUckVsVjQ2OTJBUVR0dnhTeDBTZzZNODhuN1VJbVF1TlFHYUljRHlYQ0RSRFJEXy1Ed2NWMFB6TjVYR2NfNmJNMDJXWDdsblh4cmlmY0VnWlU1TExvejYxTTNrZEhIbHJMTVZMRmw1cXRTS282Zz0iLCJkaXNwbGF5X25hbWUiOiIiLCJvbXMiOiJLMSIsImhzbV9rZXkiOiI5YjViNjVmY2VmMzliNjJjZDlkZjBjZmU4YzhjYmRlMDk3ZDQxYmRkMGRlMmFiNWZlZjgwYWZjYyIsImlzRGRwaUVuYWJsZWQiOiJOIiwiaXNNdGZFbmFibGVkIjoiTiIsImZ5X2lkIjoiWFQwMjYyNCIsImFwcFR5cGUiOjEwMCwiZXhwIjoxNzUxNzYxODAwLCJpYXQiOjE3NTE3MjY3ODgsImlzcyI6ImFwaS5meWVycy5pbiIsIm5iZiI6MTc1MTcyNjc4OCwic3ViIjoiYWNjZXNzX3Rva2VuIn0.QnqlHpUF5l2PfRziFNk0v0BQO3IGx6GDVuUSbVJToac"
fyers = fyersModel.FyersModel(client_id = client_id, is_async=False, token = access_token, log_path="")
today = datetime.today().date()
nifty_history =f"nifty_history.csv"
history_csv = f"symbol_history.csv"

CHECK_INTERVAL = 300
MARKET_START, MARKET_END = datetime.strptime("09:15", "%H:%M").time(), datetime.strptime("23:30", "%H:%M").time()
last_check = ""


df_symbol = pd.read_csv("symbols.csv", usecols =['Symbol'])
symbols = df_symbol['Symbol'].tolist()
print(symbols[:5])
all_dataframes = []


def fetch_symbol(symbol):
    
    dfs=[]
    for i in [2, 1, 0]:
        df = get_history(symbol, resolution='1D', from_sec=86400*30*12, i=i)
        if not df.empty:
            dfs.append(df)
        time.sleep(0.2)  # avoid rate limit
    if dfs:
        return pd.concat(dfs)
    return pd.DataFrame()


def get_history(symbol, resolution ='1D', from_sec = 86400*30, rec_file = history_csv,i=0):
    now = int(time.time()) -(86400*30*12*i)
    past = now - from_sec
    data = {"symbol": symbol, "resolution": resolution, "date_format": "0", "range_from": str(past), "range_to": str(now), "cont_flag": "1"}

    try:
        res = fyers.history(data=data)
        print(f"Received candles: {len(res.get('candles', []))}")

        if res.get('candles'):
            df = pd.DataFrame(res['candles'], columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='s').dt.tz_localize('UTC').dt.tz_convert('Asia/Kolkata')
            df['symbol'] = symbol
            df['ema20'] = df['close'].ewm(span=20, adjust=False).mean()
            df['ema50'] = df['close'].ewm(span=50, adjust=False).mean()
            return df


            # if os.path.exists(rec_file):
            #     old = pd.read_csv(rec_file)
            #     old['timestamp'] = pd.to_datetime(old['timestamp'], utc=True).dt.tz_convert('Asia/Kolkata')
            #     df = pd.concat([old, df]).drop_duplicates(subset=['timestamp', 'symbol'], keep='last')
        

            # df.sort_values(by=['symbol', 'timestamp'], inplace=True)  # <-- Add this
            # df.to_csv(rec_file, index=False)
            
    except Exception as e:
        print(f"History error: {e}")

    return pd.DataFrame()



with ThreadPoolExecutor(max_workers=5) as executor:
    future_to_symbol = {executor.submit(fetch_symbol, sym): sym for sym in symbols}
    for future in as_completed(future_to_symbol):
        symbol = future_to_symbol[future]
        try:
            df = future.result()
            if not df.empty:
                all_dataframes.append(df)
        except Exception as e:
            print(f"{symbol} - Failed: {e}")

if all_dataframes:
    final_df = pd.concat(all_dataframes)
    final_df.sort_values(by=['symbol', 'timestamp'], inplace=True)
    final_df.to_csv("all_symbols_history.csv", index=False)
    print("✅ All data written to all_symbols_history.csv")
else:
    print("⚠️ No data fetched.")

